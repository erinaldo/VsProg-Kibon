'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace nsCipGrava
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CipGrava")>  _
	Partial Public Class dcCipGrava
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertCfg(instance As Cfg)
    End Sub
    Partial Private Sub UpdateCfg(instance As Cfg)
    End Sub
    Partial Private Sub DeleteCfg(instance As Cfg)
    End Sub
    Partial Private Sub InsertCipGravaHistDados(instance As CipGravaHistDados)
    End Sub
    Partial Private Sub UpdateCipGravaHistDados(instance As CipGravaHistDados)
    End Sub
    Partial Private Sub DeleteCipGravaHistDados(instance As CipGravaHistDados)
    End Sub
    Partial Private Sub InsertCipCondGeralHist(instance As CipCondGeralHist)
    End Sub
    Partial Private Sub UpdateCipCondGeralHist(instance As CipCondGeralHist)
    End Sub
    Partial Private Sub DeleteCipCondGeralHist(instance As CipCondGeralHist)
    End Sub
    Partial Private Sub InsertCipGravaConta(instance As CipGravaConta)
    End Sub
    Partial Private Sub UpdateCipGravaConta(instance As CipGravaConta)
    End Sub
    Partial Private Sub DeleteCipGravaConta(instance As CipGravaConta)
    End Sub
    Partial Private Sub InsertCipGravaHist(instance As CipGravaHist)
    End Sub
    Partial Private Sub UpdateCipGravaHist(instance As CipGravaHist)
    End Sub
    Partial Private Sub DeleteCipGravaHist(instance As CipGravaHist)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.Geral.My.MySettings.Default.csCipGrava, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Cfg() As System.Data.Linq.Table(Of Cfg)
			Get
				Return Me.GetTable(Of Cfg)
			End Get
		End Property
		
		Public ReadOnly Property CipGravaHistDados() As System.Data.Linq.Table(Of CipGravaHistDados)
			Get
				Return Me.GetTable(Of CipGravaHistDados)
			End Get
		End Property
		
		Public ReadOnly Property CipCondGeralHist() As System.Data.Linq.Table(Of CipCondGeralHist)
			Get
				Return Me.GetTable(Of CipCondGeralHist)
			End Get
		End Property
		
		Public ReadOnly Property CipGravaConta() As System.Data.Linq.Table(Of CipGravaConta)
			Get
				Return Me.GetTable(Of CipGravaConta)
			End Get
		End Property
		
		Public ReadOnly Property CipGravaHist() As System.Data.Linq.Table(Of CipGravaHist)
			Get
				Return Me.GetTable(Of CipGravaHist)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cfg")>  _
	Partial Public Class Cfg
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Item As String
		
		Private _Valor As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemChanging(value As String)
    End Sub
    Partial Private Sub OnItemChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Item() As String
			Get
				Return Me._Item
			End Get
			Set
				If (String.Equals(Me._Item, value) = false) Then
					Me.OnItemChanging(value)
					Me.SendPropertyChanging
					Me._Item = value
					Me.SendPropertyChanged("Item")
					Me.OnItemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(50)")>  _
		Public Property Valor() As String
			Get
				Return Me._Valor
			End Get
			Set
				If (String.Equals(Me._Valor, value) = false) Then
					Me.OnValorChanging(value)
					Me.SendPropertyChanging
					Me._Valor = value
					Me.SendPropertyChanged("Valor")
					Me.OnValorChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipGravaHistDados")>  _
	Partial Public Class CipGravaHistDados
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CipId As Integer
		
		Private _DataHora As String
		
		Private _Cond As System.Nullable(Of Double)
		
		Private _Temp As System.Nullable(Of Double)
		
		Private _Vazao As System.Nullable(Of Double)
		
		Private _Blk As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCipIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCipIdChanged()
    End Sub
    Partial Private Sub OnDataHoraChanging(value As String)
    End Sub
    Partial Private Sub OnDataHoraChanged()
    End Sub
    Partial Private Sub OnCondChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCondChanged()
    End Sub
    Partial Private Sub OnTempChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTempChanged()
    End Sub
    Partial Private Sub OnVazaoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnVazaoChanged()
    End Sub
    Partial Private Sub OnBlkChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBlkChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CipId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CipId() As Integer
			Get
				Return Me._CipId
			End Get
			Set
				If ((Me._CipId = value)  _
							= false) Then
					Me.OnCipIdChanging(value)
					Me.SendPropertyChanging
					Me._CipId = value
					Me.SendPropertyChanged("CipId")
					Me.OnCipIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHora", DbType:="NVarChar(14) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property DataHora() As String
			Get
				Return Me._DataHora
			End Get
			Set
				If (String.Equals(Me._DataHora, value) = false) Then
					Me.OnDataHoraChanging(value)
					Me.SendPropertyChanging
					Me._DataHora = value
					Me.SendPropertyChanged("DataHora")
					Me.OnDataHoraChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cond", DbType:="Float")>  _
		Public Property Cond() As System.Nullable(Of Double)
			Get
				Return Me._Cond
			End Get
			Set
				If (Me._Cond.Equals(value) = false) Then
					Me.OnCondChanging(value)
					Me.SendPropertyChanging
					Me._Cond = value
					Me.SendPropertyChanged("Cond")
					Me.OnCondChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Temp", DbType:="Float")>  _
		Public Property Temp() As System.Nullable(Of Double)
			Get
				Return Me._Temp
			End Get
			Set
				If (Me._Temp.Equals(value) = false) Then
					Me.OnTempChanging(value)
					Me.SendPropertyChanging
					Me._Temp = value
					Me.SendPropertyChanged("Temp")
					Me.OnTempChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vazao", DbType:="Float")>  _
		Public Property Vazao() As System.Nullable(Of Double)
			Get
				Return Me._Vazao
			End Get
			Set
				If (Me._Vazao.Equals(value) = false) Then
					Me.OnVazaoChanging(value)
					Me.SendPropertyChanging
					Me._Vazao = value
					Me.SendPropertyChanged("Vazao")
					Me.OnVazaoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Blk", DbType:="Int")>  _
		Public Property Blk() As System.Nullable(Of Integer)
			Get
				Return Me._Blk
			End Get
			Set
				If (Me._Blk.Equals(value) = false) Then
					Me.OnBlkChanging(value)
					Me.SendPropertyChanging
					Me._Blk = value
					Me.SendPropertyChanged("Blk")
					Me.OnBlkChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipCondGeralHist")>  _
	Partial Public Class CipCondGeralHist
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _DataHora As String
		
		Private _CircA As System.Nullable(Of Double)
		
		Private _CircB As System.Nullable(Of Double)
		
		Private _CircC As System.Nullable(Of Double)
		
		Private _CircD As System.Nullable(Of Double)
		
		Private _CircE As System.Nullable(Of Double)
		
		Private _T6503 As System.Nullable(Of Double)
		
		Private _T6535 As System.Nullable(Of Double)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataHoraChanging(value As String)
    End Sub
    Partial Private Sub OnDataHoraChanged()
    End Sub
    Partial Private Sub OnCircAChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCircAChanged()
    End Sub
    Partial Private Sub OnCircBChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCircBChanged()
    End Sub
    Partial Private Sub OnCircCChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCircCChanged()
    End Sub
    Partial Private Sub OnCircDChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCircDChanged()
    End Sub
    Partial Private Sub OnCircEChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCircEChanged()
    End Sub
    Partial Private Sub OnT6503Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnT6503Changed()
    End Sub
    Partial Private Sub OnT6535Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnT6535Changed()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHora", DbType:="NVarChar(14) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property DataHora() As String
			Get
				Return Me._DataHora
			End Get
			Set
				If (String.Equals(Me._DataHora, value) = false) Then
					Me.OnDataHoraChanging(value)
					Me.SendPropertyChanging
					Me._DataHora = value
					Me.SendPropertyChanged("DataHora")
					Me.OnDataHoraChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircA", DbType:="Float")>  _
		Public Property CircA() As System.Nullable(Of Double)
			Get
				Return Me._CircA
			End Get
			Set
				If (Me._CircA.Equals(value) = false) Then
					Me.OnCircAChanging(value)
					Me.SendPropertyChanging
					Me._CircA = value
					Me.SendPropertyChanged("CircA")
					Me.OnCircAChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircB", DbType:="Float")>  _
		Public Property CircB() As System.Nullable(Of Double)
			Get
				Return Me._CircB
			End Get
			Set
				If (Me._CircB.Equals(value) = false) Then
					Me.OnCircBChanging(value)
					Me.SendPropertyChanging
					Me._CircB = value
					Me.SendPropertyChanged("CircB")
					Me.OnCircBChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircC", DbType:="Float")>  _
		Public Property CircC() As System.Nullable(Of Double)
			Get
				Return Me._CircC
			End Get
			Set
				If (Me._CircC.Equals(value) = false) Then
					Me.OnCircCChanging(value)
					Me.SendPropertyChanging
					Me._CircC = value
					Me.SendPropertyChanged("CircC")
					Me.OnCircCChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircD", DbType:="Float")>  _
		Public Property CircD() As System.Nullable(Of Double)
			Get
				Return Me._CircD
			End Get
			Set
				If (Me._CircD.Equals(value) = false) Then
					Me.OnCircDChanging(value)
					Me.SendPropertyChanging
					Me._CircD = value
					Me.SendPropertyChanged("CircD")
					Me.OnCircDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CircE", DbType:="Float")>  _
		Public Property CircE() As System.Nullable(Of Double)
			Get
				Return Me._CircE
			End Get
			Set
				If (Me._CircE.Equals(value) = false) Then
					Me.OnCircEChanging(value)
					Me.SendPropertyChanging
					Me._CircE = value
					Me.SendPropertyChanged("CircE")
					Me.OnCircEChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_T6503", DbType:="Float")>  _
		Public Property T6503() As System.Nullable(Of Double)
			Get
				Return Me._T6503
			End Get
			Set
				If (Me._T6503.Equals(value) = false) Then
					Me.OnT6503Changing(value)
					Me.SendPropertyChanging
					Me._T6503 = value
					Me.SendPropertyChanged("T6503")
					Me.OnT6503Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_T6535", DbType:="Float")>  _
		Public Property T6535() As System.Nullable(Of Double)
			Get
				Return Me._T6535
			End Get
			Set
				If (Me._T6535.Equals(value) = false) Then
					Me.OnT6535Changing(value)
					Me.SendPropertyChanging
					Me._T6535 = value
					Me.SendPropertyChanged("T6535")
					Me.OnT6535Changed
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipGravaConta")>  _
	Partial Public Class CipGravaConta
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tq As Integer
		
		Private _DataHora As String
		
		Private _Contagem As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTqChanging(value As Integer)
    End Sub
    Partial Private Sub OnTqChanged()
    End Sub
    Partial Private Sub OnDataHoraChanging(value As String)
    End Sub
    Partial Private Sub OnDataHoraChanged()
    End Sub
    Partial Private Sub OnContagemChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContagemChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tq", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Tq() As Integer
			Get
				Return Me._Tq
			End Get
			Set
				If ((Me._Tq = value)  _
							= false) Then
					Me.OnTqChanging(value)
					Me.SendPropertyChanging
					Me._Tq = value
					Me.SendPropertyChanged("Tq")
					Me.OnTqChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHora", DbType:="NVarChar(14) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property DataHora() As String
			Get
				Return Me._DataHora
			End Get
			Set
				If (String.Equals(Me._DataHora, value) = false) Then
					Me.OnDataHoraChanging(value)
					Me.SendPropertyChanging
					Me._DataHora = value
					Me.SendPropertyChanged("DataHora")
					Me.OnDataHoraChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contagem", DbType:="Int")>  _
		Public Property Contagem() As System.Nullable(Of Integer)
			Get
				Return Me._Contagem
			End Get
			Set
				If (Me._Contagem.Equals(value) = false) Then
					Me.OnContagemChanging(value)
					Me.SendPropertyChanging
					Me._Contagem = value
					Me.SendPropertyChanged("Contagem")
					Me.OnContagemChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipGravaHist")>  _
	Partial Public Class CipGravaHist
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CipId As Integer
		
		Private _DataHora As String
		
		Private _Circ As String
		
		Private _Fim As System.Nullable(Of Integer)
		
		Private _RotaId As System.Nullable(Of Integer)
		
		Private _RotaDescr As String
		
		Private _RecId As System.Nullable(Of Integer)
		
		Private _RecDescr As String
		
		Private _Analise As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCipIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCipIdChanged()
    End Sub
    Partial Private Sub OnDataHoraChanging(value As String)
    End Sub
    Partial Private Sub OnDataHoraChanged()
    End Sub
    Partial Private Sub OnCircChanging(value As String)
    End Sub
    Partial Private Sub OnCircChanged()
    End Sub
    Partial Private Sub OnFimChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFimChanged()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnRotaDescrChanging(value As String)
    End Sub
    Partial Private Sub OnRotaDescrChanged()
    End Sub
    Partial Private Sub OnRecIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRecIdChanged()
    End Sub
    Partial Private Sub OnRecDescrChanging(value As String)
    End Sub
    Partial Private Sub OnRecDescrChanged()
    End Sub
    Partial Private Sub OnAnaliseChanging(value As String)
    End Sub
    Partial Private Sub OnAnaliseChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CipId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CipId() As Integer
			Get
				Return Me._CipId
			End Get
			Set
				If ((Me._CipId = value)  _
							= false) Then
					Me.OnCipIdChanging(value)
					Me.SendPropertyChanging
					Me._CipId = value
					Me.SendPropertyChanged("CipId")
					Me.OnCipIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHora", DbType:="NVarChar(14) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property DataHora() As String
			Get
				Return Me._DataHora
			End Get
			Set
				If (String.Equals(Me._DataHora, value) = false) Then
					Me.OnDataHoraChanging(value)
					Me.SendPropertyChanging
					Me._DataHora = value
					Me.SendPropertyChanged("DataHora")
					Me.OnDataHoraChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Circ", DbType:="NVarChar(2) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Circ() As String
			Get
				Return Me._Circ
			End Get
			Set
				If (String.Equals(Me._Circ, value) = false) Then
					Me.OnCircChanging(value)
					Me.SendPropertyChanging
					Me._Circ = value
					Me.SendPropertyChanged("Circ")
					Me.OnCircChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fim", DbType:="Int")>  _
		Public Property Fim() As System.Nullable(Of Integer)
			Get
				Return Me._Fim
			End Get
			Set
				If (Me._Fim.Equals(value) = false) Then
					Me.OnFimChanging(value)
					Me.SendPropertyChanging
					Me._Fim = value
					Me.SendPropertyChanged("Fim")
					Me.OnFimChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int")>  _
		Public Property RotaId() As System.Nullable(Of Integer)
			Get
				Return Me._RotaId
			End Get
			Set
				If (Me._RotaId.Equals(value) = false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaDescr", DbType:="NVarChar(50)")>  _
		Public Property RotaDescr() As String
			Get
				Return Me._RotaDescr
			End Get
			Set
				If (String.Equals(Me._RotaDescr, value) = false) Then
					Me.OnRotaDescrChanging(value)
					Me.SendPropertyChanging
					Me._RotaDescr = value
					Me.SendPropertyChanged("RotaDescr")
					Me.OnRotaDescrChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecId", DbType:="Int")>  _
		Public Property RecId() As System.Nullable(Of Integer)
			Get
				Return Me._RecId
			End Get
			Set
				If (Me._RecId.Equals(value) = false) Then
					Me.OnRecIdChanging(value)
					Me.SendPropertyChanging
					Me._RecId = value
					Me.SendPropertyChanged("RecId")
					Me.OnRecIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecDescr", DbType:="NVarChar(50)")>  _
		Public Property RecDescr() As String
			Get
				Return Me._RecDescr
			End Get
			Set
				If (String.Equals(Me._RecDescr, value) = false) Then
					Me.OnRecDescrChanging(value)
					Me.SendPropertyChanging
					Me._RecDescr = value
					Me.SendPropertyChanged("RecDescr")
					Me.OnRecDescrChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Analise", DbType:="NVarChar(500)")>  _
		Public Property Analise() As String
			Get
				Return Me._Analise
			End Get
			Set
				If (String.Equals(Me._Analise, value) = false) Then
					Me.OnAnaliseChanging(value)
					Me.SendPropertyChanging
					Me._Analise = value
					Me.SendPropertyChanged("Analise")
					Me.OnAnaliseChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
