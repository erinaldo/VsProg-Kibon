'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace nsCipValid
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CipValid")>  _
	Partial Public Class dcCipValid
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertCadCfg(instance As CadCfg)
    End Sub
    Partial Private Sub UpdateCadCfg(instance As CadCfg)
    End Sub
    Partial Private Sub DeleteCadCfg(instance As CadCfg)
    End Sub
    Partial Private Sub InsertRelatXlsLog(instance As RelatXlsLog)
    End Sub
    Partial Private Sub UpdateRelatXlsLog(instance As RelatXlsLog)
    End Sub
    Partial Private Sub DeleteRelatXlsLog(instance As RelatXlsLog)
    End Sub
    Partial Private Sub InsertCadPtoCr(instance As CadPtoCr)
    End Sub
    Partial Private Sub UpdateCadPtoCr(instance As CadPtoCr)
    End Sub
    Partial Private Sub DeleteCadPtoCr(instance As CadPtoCr)
    End Sub
    Partial Private Sub InsertCadRotaPtoCr(instance As CadRotaPtoCr)
    End Sub
    Partial Private Sub UpdateCadRotaPtoCr(instance As CadRotaPtoCr)
    End Sub
    Partial Private Sub DeleteCadRotaPtoCr(instance As CadRotaPtoCr)
    End Sub
    Partial Private Sub InsertCadRotasLim(instance As CadRotasLim)
    End Sub
    Partial Private Sub UpdateCadRotasLim(instance As CadRotasLim)
    End Sub
    Partial Private Sub DeleteCadRotasLim(instance As CadRotasLim)
    End Sub
    Partial Private Sub InsertCadRotasVl(instance As CadRotasVl)
    End Sub
    Partial Private Sub UpdateCadRotasVl(instance As CadRotasVl)
    End Sub
    Partial Private Sub DeleteCadRotasVl(instance As CadRotasVl)
    End Sub
    Partial Private Sub InsertCadUser(instance As CadUser)
    End Sub
    Partial Private Sub UpdateCadUser(instance As CadUser)
    End Sub
    Partial Private Sub DeleteCadUser(instance As CadUser)
    End Sub
    Partial Private Sub InsertCadUserHab(instance As CadUserHab)
    End Sub
    Partial Private Sub UpdateCadUserHab(instance As CadUserHab)
    End Sub
    Partial Private Sub DeleteCadUserHab(instance As CadUserHab)
    End Sub
    Partial Private Sub InsertCadUserSeg(instance As CadUserSeg)
    End Sub
    Partial Private Sub UpdateCadUserSeg(instance As CadUserSeg)
    End Sub
    Partial Private Sub DeleteCadUserSeg(instance As CadUserSeg)
    End Sub
    Partial Private Sub InsertCipHist(instance As CipHist)
    End Sub
    Partial Private Sub UpdateCipHist(instance As CipHist)
    End Sub
    Partial Private Sub DeleteCipHist(instance As CipHist)
    End Sub
    Partial Private Sub InsertCipHistAnorm(instance As CipHistAnorm)
    End Sub
    Partial Private Sub UpdateCipHistAnorm(instance As CipHistAnorm)
    End Sub
    Partial Private Sub DeleteCipHistAnorm(instance As CipHistAnorm)
    End Sub
    Partial Private Sub InsertCipHistDados(instance As CipHistDados)
    End Sub
    Partial Private Sub UpdateCipHistDados(instance As CipHistDados)
    End Sub
    Partial Private Sub DeleteCipHistDados(instance As CipHistDados)
    End Sub
    Partial Private Sub InsertCipHistPtoCr(instance As CipHistPtoCr)
    End Sub
    Partial Private Sub UpdateCipHistPtoCr(instance As CipHistPtoCr)
    End Sub
    Partial Private Sub DeleteCipHistPtoCr(instance As CipHistPtoCr)
    End Sub
    Partial Private Sub InsertCipSchedPer(instance As CipSchedPer)
    End Sub
    Partial Private Sub UpdateCipSchedPer(instance As CipSchedPer)
    End Sub
    Partial Private Sub DeleteCipSchedPer(instance As CipSchedPer)
    End Sub
    Partial Private Sub InsertCipSchedPerMes(instance As CipSchedPerMes)
    End Sub
    Partial Private Sub UpdateCipSchedPerMes(instance As CipSchedPerMes)
    End Sub
    Partial Private Sub DeleteCipSchedPerMes(instance As CipSchedPerMes)
    End Sub
    Partial Private Sub InsertCipSchedPerSem(instance As CipSchedPerSem)
    End Sub
    Partial Private Sub UpdateCipSchedPerSem(instance As CipSchedPerSem)
    End Sub
    Partial Private Sub DeleteCipSchedPerSem(instance As CipSchedPerSem)
    End Sub
    Partial Private Sub InsertCipSchedProg(instance As CipSchedProg)
    End Sub
    Partial Private Sub UpdateCipSchedProg(instance As CipSchedProg)
    End Sub
    Partial Private Sub DeleteCipSchedProg(instance As CipSchedProg)
    End Sub
    Partial Private Sub InsertCipSeq(instance As CipSeq)
    End Sub
    Partial Private Sub UpdateCipSeq(instance As CipSeq)
    End Sub
    Partial Private Sub DeleteCipSeq(instance As CipSeq)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.Geral.My.MySettings.Default.csCipValid, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property CadCfg() As System.Data.Linq.Table(Of CadCfg)
			Get
				Return Me.GetTable(Of CadCfg)
			End Get
		End Property
		
		Public ReadOnly Property RelatXlsLog() As System.Data.Linq.Table(Of RelatXlsLog)
			Get
				Return Me.GetTable(Of RelatXlsLog)
			End Get
		End Property
		
		Public ReadOnly Property CadPtoCr() As System.Data.Linq.Table(Of CadPtoCr)
			Get
				Return Me.GetTable(Of CadPtoCr)
			End Get
		End Property
		
		Public ReadOnly Property CadRotaPtoCr() As System.Data.Linq.Table(Of CadRotaPtoCr)
			Get
				Return Me.GetTable(Of CadRotaPtoCr)
			End Get
		End Property
		
		Public ReadOnly Property CadRotasLim() As System.Data.Linq.Table(Of CadRotasLim)
			Get
				Return Me.GetTable(Of CadRotasLim)
			End Get
		End Property
		
		Public ReadOnly Property CadRotasVl() As System.Data.Linq.Table(Of CadRotasVl)
			Get
				Return Me.GetTable(Of CadRotasVl)
			End Get
		End Property
		
		Public ReadOnly Property CadUser() As System.Data.Linq.Table(Of CadUser)
			Get
				Return Me.GetTable(Of CadUser)
			End Get
		End Property
		
		Public ReadOnly Property CadUserHab() As System.Data.Linq.Table(Of CadUserHab)
			Get
				Return Me.GetTable(Of CadUserHab)
			End Get
		End Property
		
		Public ReadOnly Property CadUserSeg() As System.Data.Linq.Table(Of CadUserSeg)
			Get
				Return Me.GetTable(Of CadUserSeg)
			End Get
		End Property
		
		Public ReadOnly Property CipHist() As System.Data.Linq.Table(Of CipHist)
			Get
				Return Me.GetTable(Of CipHist)
			End Get
		End Property
		
		Public ReadOnly Property CipHistAnorm() As System.Data.Linq.Table(Of CipHistAnorm)
			Get
				Return Me.GetTable(Of CipHistAnorm)
			End Get
		End Property
		
		Public ReadOnly Property CipHistDados() As System.Data.Linq.Table(Of CipHistDados)
			Get
				Return Me.GetTable(Of CipHistDados)
			End Get
		End Property
		
		Public ReadOnly Property CipHistPtoCr() As System.Data.Linq.Table(Of CipHistPtoCr)
			Get
				Return Me.GetTable(Of CipHistPtoCr)
			End Get
		End Property
		
		Public ReadOnly Property CipSchedPer() As System.Data.Linq.Table(Of CipSchedPer)
			Get
				Return Me.GetTable(Of CipSchedPer)
			End Get
		End Property
		
		Public ReadOnly Property CipSchedPerMes() As System.Data.Linq.Table(Of CipSchedPerMes)
			Get
				Return Me.GetTable(Of CipSchedPerMes)
			End Get
		End Property
		
		Public ReadOnly Property CipSchedPerSem() As System.Data.Linq.Table(Of CipSchedPerSem)
			Get
				Return Me.GetTable(Of CipSchedPerSem)
			End Get
		End Property
		
		Public ReadOnly Property CipSchedProg() As System.Data.Linq.Table(Of CipSchedProg)
			Get
				Return Me.GetTable(Of CipSchedProg)
			End Get
		End Property
		
		Public ReadOnly Property CipSeq() As System.Data.Linq.Table(Of CipSeq)
			Get
				Return Me.GetTable(Of CipSeq)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CadCfg")>  _
	Partial Public Class CadCfg
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Cfg As String
		
		Private _Valor As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCfgChanging(value As String)
    End Sub
    Partial Private Sub OnCfgChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cfg", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Cfg() As String
			Get
				Return Me._Cfg
			End Get
			Set
				If (String.Equals(Me._Cfg, value) = false) Then
					Me.OnCfgChanging(value)
					Me.SendPropertyChanging
					Me._Cfg = value
					Me.SendPropertyChanged("Cfg")
					Me.OnCfgChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(256)")>  _
		Public Property Valor() As String
			Get
				Return Me._Valor
			End Get
			Set
				If (String.Equals(Me._Valor, value) = false) Then
					Me.OnValorChanging(value)
					Me.SendPropertyChanging
					Me._Valor = value
					Me.SendPropertyChanged("Valor")
					Me.OnValorChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RelatXlsLog")>  _
	Partial Public Class RelatXlsLog
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Data As String
		
		Private _CipId As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDataChanging(value As String)
    End Sub
    Partial Private Sub OnDataChanged()
    End Sub
    Partial Private Sub OnCipIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCipIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Data", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Data() As String
			Get
				Return Me._Data
			End Get
			Set
				If (String.Equals(Me._Data, value) = false) Then
					Me.OnDataChanging(value)
					Me.SendPropertyChanging
					Me._Data = value
					Me.SendPropertyChanged("Data")
					Me.OnDataChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CipId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CipId() As Integer
			Get
				Return Me._CipId
			End Get
			Set
				If ((Me._CipId = value)  _
							= false) Then
					Me.OnCipIdChanging(value)
					Me.SendPropertyChanging
					Me._CipId = value
					Me.SendPropertyChanged("CipId")
					Me.OnCipIdChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CadPtoCr")>  _
	Partial Public Class CadPtoCr
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _PtoCrId As Integer
		
		Private _Pergunta As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPtoCrIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPtoCrIdChanged()
    End Sub
    Partial Private Sub OnPerguntaChanging(value As String)
    End Sub
    Partial Private Sub OnPerguntaChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PtoCrId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property PtoCrId() As Integer
			Get
				Return Me._PtoCrId
			End Get
			Set
				If ((Me._PtoCrId = value)  _
							= false) Then
					Me.OnPtoCrIdChanging(value)
					Me.SendPropertyChanging
					Me._PtoCrId = value
					Me.SendPropertyChanged("PtoCrId")
					Me.OnPtoCrIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pergunta", DbType:="NVarChar(256)")>  _
		Public Property Pergunta() As String
			Get
				Return Me._Pergunta
			End Get
			Set
				If (String.Equals(Me._Pergunta, value) = false) Then
					Me.OnPerguntaChanging(value)
					Me.SendPropertyChanging
					Me._Pergunta = value
					Me.SendPropertyChanged("Pergunta")
					Me.OnPerguntaChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CadRotaPtoCr")>  _
	Partial Public Class CadRotaPtoCr
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _PtoCrId As String
		
		Private _Seq As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnPtoCrIdChanging(value As String)
    End Sub
    Partial Private Sub OnPtoCrIdChanged()
    End Sub
    Partial Private Sub OnSeqChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSeqChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PtoCrId", DbType:="Char(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property PtoCrId() As String
			Get
				Return Me._PtoCrId
			End Get
			Set
				If (String.Equals(Me._PtoCrId, value) = false) Then
					Me.OnPtoCrIdChanging(value)
					Me.SendPropertyChanging
					Me._PtoCrId = value
					Me.SendPropertyChanged("PtoCrId")
					Me.OnPtoCrIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seq", DbType:="Int")>  _
		Public Property Seq() As System.Nullable(Of Integer)
			Get
				Return Me._Seq
			End Get
			Set
				If (Me._Seq.Equals(value) = false) Then
					Me.OnSeqChanging(value)
					Me.SendPropertyChanging
					Me._Seq = value
					Me.SendPropertyChanged("Seq")
					Me.OnSeqChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CadRotasLim")>  _
	Partial Public Class CadRotasLim
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _LimRev As Integer
		
		Private _BlkNum As Integer
		
		Private _TempMax As System.Nullable(Of Single)
		
		Private _TempMin As System.Nullable(Of Single)
		
		Private _CondMax As System.Nullable(Of Single)
		
		Private _CondMin As System.Nullable(Of Single)
		
		Private _VazaoMax As System.Nullable(Of Single)
		
		Private _VazaoMin As System.Nullable(Of Single)
		
		Private _TempoAjuste As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnLimRevChanging(value As Integer)
    End Sub
    Partial Private Sub OnLimRevChanged()
    End Sub
    Partial Private Sub OnBlkNumChanging(value As Integer)
    End Sub
    Partial Private Sub OnBlkNumChanged()
    End Sub
    Partial Private Sub OnTempMaxChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnTempMaxChanged()
    End Sub
    Partial Private Sub OnTempMinChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnTempMinChanged()
    End Sub
    Partial Private Sub OnCondMaxChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnCondMaxChanged()
    End Sub
    Partial Private Sub OnCondMinChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnCondMinChanged()
    End Sub
    Partial Private Sub OnVazaoMaxChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnVazaoMaxChanged()
    End Sub
    Partial Private Sub OnVazaoMinChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnVazaoMinChanged()
    End Sub
    Partial Private Sub OnTempoAjusteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTempoAjusteChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LimRev", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property LimRev() As Integer
			Get
				Return Me._LimRev
			End Get
			Set
				If ((Me._LimRev = value)  _
							= false) Then
					Me.OnLimRevChanging(value)
					Me.SendPropertyChanging
					Me._LimRev = value
					Me.SendPropertyChanged("LimRev")
					Me.OnLimRevChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BlkNum", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property BlkNum() As Integer
			Get
				Return Me._BlkNum
			End Get
			Set
				If ((Me._BlkNum = value)  _
							= false) Then
					Me.OnBlkNumChanging(value)
					Me.SendPropertyChanging
					Me._BlkNum = value
					Me.SendPropertyChanged("BlkNum")
					Me.OnBlkNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempMax", DbType:="Real")>  _
		Public Property TempMax() As System.Nullable(Of Single)
			Get
				Return Me._TempMax
			End Get
			Set
				If (Me._TempMax.Equals(value) = false) Then
					Me.OnTempMaxChanging(value)
					Me.SendPropertyChanging
					Me._TempMax = value
					Me.SendPropertyChanged("TempMax")
					Me.OnTempMaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempMin", DbType:="Real")>  _
		Public Property TempMin() As System.Nullable(Of Single)
			Get
				Return Me._TempMin
			End Get
			Set
				If (Me._TempMin.Equals(value) = false) Then
					Me.OnTempMinChanging(value)
					Me.SendPropertyChanging
					Me._TempMin = value
					Me.SendPropertyChanged("TempMin")
					Me.OnTempMinChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CondMax", DbType:="Real")>  _
		Public Property CondMax() As System.Nullable(Of Single)
			Get
				Return Me._CondMax
			End Get
			Set
				If (Me._CondMax.Equals(value) = false) Then
					Me.OnCondMaxChanging(value)
					Me.SendPropertyChanging
					Me._CondMax = value
					Me.SendPropertyChanged("CondMax")
					Me.OnCondMaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CondMin", DbType:="Real")>  _
		Public Property CondMin() As System.Nullable(Of Single)
			Get
				Return Me._CondMin
			End Get
			Set
				If (Me._CondMin.Equals(value) = false) Then
					Me.OnCondMinChanging(value)
					Me.SendPropertyChanging
					Me._CondMin = value
					Me.SendPropertyChanged("CondMin")
					Me.OnCondMinChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VazaoMax", DbType:="Real")>  _
		Public Property VazaoMax() As System.Nullable(Of Single)
			Get
				Return Me._VazaoMax
			End Get
			Set
				If (Me._VazaoMax.Equals(value) = false) Then
					Me.OnVazaoMaxChanging(value)
					Me.SendPropertyChanging
					Me._VazaoMax = value
					Me.SendPropertyChanged("VazaoMax")
					Me.OnVazaoMaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VazaoMin", DbType:="Real")>  _
		Public Property VazaoMin() As System.Nullable(Of Single)
			Get
				Return Me._VazaoMin
			End Get
			Set
				If (Me._VazaoMin.Equals(value) = false) Then
					Me.OnVazaoMinChanging(value)
					Me.SendPropertyChanging
					Me._VazaoMin = value
					Me.SendPropertyChanged("VazaoMin")
					Me.OnVazaoMinChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempoAjuste", DbType:="Int")>  _
		Public Property TempoAjuste() As System.Nullable(Of Integer)
			Get
				Return Me._TempoAjuste
			End Get
			Set
				If (Me._TempoAjuste.Equals(value) = false) Then
					Me.OnTempoAjusteChanging(value)
					Me.SendPropertyChanging
					Me._TempoAjuste = value
					Me.SendPropertyChanged("TempoAjuste")
					Me.OnTempoAjusteChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CadRotasVl")>  _
	Partial Public Class CadRotasVl
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _LimRevAtual As System.Nullable(Of Integer)
		
		Private _PrcTempoMax As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnLimRevAtualChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLimRevAtualChanged()
    End Sub
    Partial Private Sub OnPrcTempoMaxChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPrcTempoMaxChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LimRevAtual", DbType:="Int")>  _
		Public Property LimRevAtual() As System.Nullable(Of Integer)
			Get
				Return Me._LimRevAtual
			End Get
			Set
				If (Me._LimRevAtual.Equals(value) = false) Then
					Me.OnLimRevAtualChanging(value)
					Me.SendPropertyChanging
					Me._LimRevAtual = value
					Me.SendPropertyChanged("LimRevAtual")
					Me.OnLimRevAtualChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrcTempoMax", DbType:="Int")>  _
		Public Property PrcTempoMax() As System.Nullable(Of Integer)
			Get
				Return Me._PrcTempoMax
			End Get
			Set
				If (Me._PrcTempoMax.Equals(value) = false) Then
					Me.OnPrcTempoMaxChanging(value)
					Me.SendPropertyChanging
					Me._PrcTempoMax = value
					Me.SendPropertyChanged("PrcTempoMax")
					Me.OnPrcTempoMaxChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CadUser")>  _
	Partial Public Class CadUser
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UserId As Integer
		
		Private _Nome As String
		
		Private _Login As String
		
		Private _Senha As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    Partial Private Sub OnSenhaChanging(value As String)
    End Sub
    Partial Private Sub OnSenhaChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property UserId() As Integer
			Get
				Return Me._UserId
			End Get
			Set
				If ((Me._UserId = value)  _
							= false) Then
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="NVarChar(256)")>  _
		Public Property Nome() As String
			Get
				Return Me._Nome
			End Get
			Set
				If (String.Equals(Me._Nome, value) = false) Then
					Me.OnNomeChanging(value)
					Me.SendPropertyChanging
					Me._Nome = value
					Me.SendPropertyChanged("Nome")
					Me.OnNomeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="NVarChar(20)")>  _
		Public Property Login() As String
			Get
				Return Me._Login
			End Get
			Set
				If (String.Equals(Me._Login, value) = false) Then
					Me.OnLoginChanging(value)
					Me.SendPropertyChanging
					Me._Login = value
					Me.SendPropertyChanged("Login")
					Me.OnLoginChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Senha", DbType:="NVarChar(40)")>  _
		Public Property Senha() As String
			Get
				Return Me._Senha
			End Get
			Set
				If (String.Equals(Me._Senha, value) = false) Then
					Me.OnSenhaChanging(value)
					Me.SendPropertyChanging
					Me._Senha = value
					Me.SendPropertyChanged("Senha")
					Me.OnSenhaChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CadUserHab")>  _
	Partial Public Class CadUserHab
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UserId As Integer
		
		Private _SegId As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnSegIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSegIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property UserId() As Integer
			Get
				Return Me._UserId
			End Get
			Set
				If ((Me._UserId = value)  _
							= false) Then
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SegId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property SegId() As Integer
			Get
				Return Me._SegId
			End Get
			Set
				If ((Me._SegId = value)  _
							= false) Then
					Me.OnSegIdChanging(value)
					Me.SendPropertyChanging
					Me._SegId = value
					Me.SendPropertyChanged("SegId")
					Me.OnSegIdChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CadUserSeg")>  _
	Partial Public Class CadUserSeg
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SegId As Integer
		
		Private _Nome As String
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSegIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSegIdChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SegId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property SegId() As Integer
			Get
				Return Me._SegId
			End Get
			Set
				If ((Me._SegId = value)  _
							= false) Then
					Me.OnSegIdChanging(value)
					Me.SendPropertyChanging
					Me._SegId = value
					Me.SendPropertyChanged("SegId")
					Me.OnSegIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="NVarChar(256)")>  _
		Public Property Nome() As String
			Get
				Return Me._Nome
			End Get
			Set
				If (String.Equals(Me._Nome, value) = false) Then
					Me.OnNomeChanging(value)
					Me.SendPropertyChanging
					Me._Nome = value
					Me.SendPropertyChanged("Nome")
					Me.OnNomeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="NVarChar(256)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipHist")>  _
	Partial Public Class CipHist
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CipId As Integer
		
		Private _RotaId As System.Nullable(Of Integer)
		
		Private _Circ As String
		
		Private _RecNum As System.Nullable(Of Integer)
		
		Private _DataHoraIni As System.Nullable(Of Date)
		
		Private _DataHoraFim As System.Nullable(Of Date)
		
		Private _UserId As System.Nullable(Of Integer)
		
		Private _Status As System.Nullable(Of Integer)
		
		Private _LimRev As System.Nullable(Of Integer)
		
		Private _UserIdValid As System.Nullable(Of Integer)
		
		Private _FlagAtrasado As System.Nullable(Of Integer)
		
		Private _FlagCancelado As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCipIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCipIdChanged()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnCircChanging(value As String)
    End Sub
    Partial Private Sub OnCircChanged()
    End Sub
    Partial Private Sub OnRecNumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRecNumChanged()
    End Sub
    Partial Private Sub OnDataHoraIniChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataHoraIniChanged()
    End Sub
    Partial Private Sub OnDataHoraFimChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataHoraFimChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnLimRevChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLimRevChanged()
    End Sub
    Partial Private Sub OnUserIdValidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdValidChanged()
    End Sub
    Partial Private Sub OnFlagAtrasadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFlagAtrasadoChanged()
    End Sub
    Partial Private Sub OnFlagCanceladoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFlagCanceladoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CipId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CipId() As Integer
			Get
				Return Me._CipId
			End Get
			Set
				If ((Me._CipId = value)  _
							= false) Then
					Me.OnCipIdChanging(value)
					Me.SendPropertyChanging
					Me._CipId = value
					Me.SendPropertyChanged("CipId")
					Me.OnCipIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int")>  _
		Public Property RotaId() As System.Nullable(Of Integer)
			Get
				Return Me._RotaId
			End Get
			Set
				If (Me._RotaId.Equals(value) = false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Circ", DbType:="NVarChar(1)")>  _
		Public Property Circ() As String
			Get
				Return Me._Circ
			End Get
			Set
				If (String.Equals(Me._Circ, value) = false) Then
					Me.OnCircChanging(value)
					Me.SendPropertyChanging
					Me._Circ = value
					Me.SendPropertyChanged("Circ")
					Me.OnCircChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecNum", DbType:="Int")>  _
		Public Property RecNum() As System.Nullable(Of Integer)
			Get
				Return Me._RecNum
			End Get
			Set
				If (Me._RecNum.Equals(value) = false) Then
					Me.OnRecNumChanging(value)
					Me.SendPropertyChanging
					Me._RecNum = value
					Me.SendPropertyChanged("RecNum")
					Me.OnRecNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHoraIni", DbType:="DateTime")>  _
		Public Property DataHoraIni() As System.Nullable(Of Date)
			Get
				Return Me._DataHoraIni
			End Get
			Set
				If (Me._DataHoraIni.Equals(value) = false) Then
					Me.OnDataHoraIniChanging(value)
					Me.SendPropertyChanging
					Me._DataHoraIni = value
					Me.SendPropertyChanged("DataHoraIni")
					Me.OnDataHoraIniChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHoraFim", DbType:="DateTime")>  _
		Public Property DataHoraFim() As System.Nullable(Of Date)
			Get
				Return Me._DataHoraFim
			End Get
			Set
				If (Me._DataHoraFim.Equals(value) = false) Then
					Me.OnDataHoraFimChanging(value)
					Me.SendPropertyChanging
					Me._DataHoraFim = value
					Me.SendPropertyChanged("DataHoraFim")
					Me.OnDataHoraFimChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
		Public Property UserId() As System.Nullable(Of Integer)
			Get
				Return Me._UserId
			End Get
			Set
				If (Me._UserId.Equals(value) = false) Then
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
		Public Property Status() As System.Nullable(Of Integer)
			Get
				Return Me._Status
			End Get
			Set
				If (Me._Status.Equals(value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LimRev", DbType:="Int")>  _
		Public Property LimRev() As System.Nullable(Of Integer)
			Get
				Return Me._LimRev
			End Get
			Set
				If (Me._LimRev.Equals(value) = false) Then
					Me.OnLimRevChanging(value)
					Me.SendPropertyChanging
					Me._LimRev = value
					Me.SendPropertyChanged("LimRev")
					Me.OnLimRevChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserIdValid", DbType:="Int")>  _
		Public Property UserIdValid() As System.Nullable(Of Integer)
			Get
				Return Me._UserIdValid
			End Get
			Set
				If (Me._UserIdValid.Equals(value) = false) Then
					Me.OnUserIdValidChanging(value)
					Me.SendPropertyChanging
					Me._UserIdValid = value
					Me.SendPropertyChanged("UserIdValid")
					Me.OnUserIdValidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlagAtrasado", DbType:="Int")>  _
		Public Property FlagAtrasado() As System.Nullable(Of Integer)
			Get
				Return Me._FlagAtrasado
			End Get
			Set
				If (Me._FlagAtrasado.Equals(value) = false) Then
					Me.OnFlagAtrasadoChanging(value)
					Me.SendPropertyChanging
					Me._FlagAtrasado = value
					Me.SendPropertyChanged("FlagAtrasado")
					Me.OnFlagAtrasadoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlagCancelado", DbType:="Int")>  _
		Public Property FlagCancelado() As System.Nullable(Of Integer)
			Get
				Return Me._FlagCancelado
			End Get
			Set
				If (Me._FlagCancelado.Equals(value) = false) Then
					Me.OnFlagCanceladoChanging(value)
					Me.SendPropertyChanging
					Me._FlagCancelado = value
					Me.SendPropertyChanged("FlagCancelado")
					Me.OnFlagCanceladoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipHistAnorm")>  _
	Partial Public Class CipHistAnorm
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CipId As Integer
		
		Private _AnormId As Integer
		
		Private _DataHora As System.Nullable(Of Date)
		
		Private _AnormEquip As System.Nullable(Of Integer)
		
		Private _AnormEvnt As System.Nullable(Of Integer)
		
		Private _ObsSts As System.Nullable(Of Integer)
		
		Private _Obs As String
		
		Private _BlkNum As System.Nullable(Of Integer)
		
		Private _BlkPasso As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCipIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCipIdChanged()
    End Sub
    Partial Private Sub OnAnormIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnormIdChanged()
    End Sub
    Partial Private Sub OnDataHoraChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataHoraChanged()
    End Sub
    Partial Private Sub OnAnormEquipChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAnormEquipChanged()
    End Sub
    Partial Private Sub OnAnormEvntChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAnormEvntChanged()
    End Sub
    Partial Private Sub OnObsStsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnObsStsChanged()
    End Sub
    Partial Private Sub OnObsChanging(value As String)
    End Sub
    Partial Private Sub OnObsChanged()
    End Sub
    Partial Private Sub OnBlkNumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBlkNumChanged()
    End Sub
    Partial Private Sub OnBlkPassoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBlkPassoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CipId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CipId() As Integer
			Get
				Return Me._CipId
			End Get
			Set
				If ((Me._CipId = value)  _
							= false) Then
					Me.OnCipIdChanging(value)
					Me.SendPropertyChanging
					Me._CipId = value
					Me.SendPropertyChanged("CipId")
					Me.OnCipIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnormId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property AnormId() As Integer
			Get
				Return Me._AnormId
			End Get
			Set
				If ((Me._AnormId = value)  _
							= false) Then
					Me.OnAnormIdChanging(value)
					Me.SendPropertyChanging
					Me._AnormId = value
					Me.SendPropertyChanged("AnormId")
					Me.OnAnormIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHora", DbType:="DateTime")>  _
		Public Property DataHora() As System.Nullable(Of Date)
			Get
				Return Me._DataHora
			End Get
			Set
				If (Me._DataHora.Equals(value) = false) Then
					Me.OnDataHoraChanging(value)
					Me.SendPropertyChanging
					Me._DataHora = value
					Me.SendPropertyChanged("DataHora")
					Me.OnDataHoraChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnormEquip", DbType:="Int")>  _
		Public Property AnormEquip() As System.Nullable(Of Integer)
			Get
				Return Me._AnormEquip
			End Get
			Set
				If (Me._AnormEquip.Equals(value) = false) Then
					Me.OnAnormEquipChanging(value)
					Me.SendPropertyChanging
					Me._AnormEquip = value
					Me.SendPropertyChanged("AnormEquip")
					Me.OnAnormEquipChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AnormEvnt", DbType:="Int")>  _
		Public Property AnormEvnt() As System.Nullable(Of Integer)
			Get
				Return Me._AnormEvnt
			End Get
			Set
				If (Me._AnormEvnt.Equals(value) = false) Then
					Me.OnAnormEvntChanging(value)
					Me.SendPropertyChanging
					Me._AnormEvnt = value
					Me.SendPropertyChanged("AnormEvnt")
					Me.OnAnormEvntChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ObsSts", DbType:="Int")>  _
		Public Property ObsSts() As System.Nullable(Of Integer)
			Get
				Return Me._ObsSts
			End Get
			Set
				If (Me._ObsSts.Equals(value) = false) Then
					Me.OnObsStsChanging(value)
					Me.SendPropertyChanging
					Me._ObsSts = value
					Me.SendPropertyChanged("ObsSts")
					Me.OnObsStsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Obs", DbType:="NVarChar(256)")>  _
		Public Property Obs() As String
			Get
				Return Me._Obs
			End Get
			Set
				If (String.Equals(Me._Obs, value) = false) Then
					Me.OnObsChanging(value)
					Me.SendPropertyChanging
					Me._Obs = value
					Me.SendPropertyChanged("Obs")
					Me.OnObsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BlkNum", DbType:="Int")>  _
		Public Property BlkNum() As System.Nullable(Of Integer)
			Get
				Return Me._BlkNum
			End Get
			Set
				If (Me._BlkNum.Equals(value) = false) Then
					Me.OnBlkNumChanging(value)
					Me.SendPropertyChanging
					Me._BlkNum = value
					Me.SendPropertyChanged("BlkNum")
					Me.OnBlkNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BlkPasso", DbType:="Int")>  _
		Public Property BlkPasso() As System.Nullable(Of Integer)
			Get
				Return Me._BlkPasso
			End Get
			Set
				If (Me._BlkPasso.Equals(value) = false) Then
					Me.OnBlkPassoChanging(value)
					Me.SendPropertyChanging
					Me._BlkPasso = value
					Me.SendPropertyChanged("BlkPasso")
					Me.OnBlkPassoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipHistDados")>  _
	Partial Public Class CipHistDados
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CipId As Integer
		
		Private _DataHora As Date
		
		Private _Temp As System.Nullable(Of Single)
		
		Private _Cond As System.Nullable(Of Single)
		
		Private _Vazao As System.Nullable(Of Single)
		
		Private _BlkNum As System.Nullable(Of Integer)
		
		Private _BlkPasso As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCipIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCipIdChanged()
    End Sub
    Partial Private Sub OnDataHoraChanging(value As Date)
    End Sub
    Partial Private Sub OnDataHoraChanged()
    End Sub
    Partial Private Sub OnTempChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnTempChanged()
    End Sub
    Partial Private Sub OnCondChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnCondChanged()
    End Sub
    Partial Private Sub OnVazaoChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnVazaoChanged()
    End Sub
    Partial Private Sub OnBlkNumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBlkNumChanged()
    End Sub
    Partial Private Sub OnBlkPassoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBlkPassoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CipId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CipId() As Integer
			Get
				Return Me._CipId
			End Get
			Set
				If ((Me._CipId = value)  _
							= false) Then
					Me.OnCipIdChanging(value)
					Me.SendPropertyChanging
					Me._CipId = value
					Me.SendPropertyChanged("CipId")
					Me.OnCipIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHora", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DataHora() As Date
			Get
				Return Me._DataHora
			End Get
			Set
				If ((Me._DataHora = value)  _
							= false) Then
					Me.OnDataHoraChanging(value)
					Me.SendPropertyChanging
					Me._DataHora = value
					Me.SendPropertyChanged("DataHora")
					Me.OnDataHoraChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Temp", DbType:="Real")>  _
		Public Property Temp() As System.Nullable(Of Single)
			Get
				Return Me._Temp
			End Get
			Set
				If (Me._Temp.Equals(value) = false) Then
					Me.OnTempChanging(value)
					Me.SendPropertyChanging
					Me._Temp = value
					Me.SendPropertyChanged("Temp")
					Me.OnTempChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cond", DbType:="Real")>  _
		Public Property Cond() As System.Nullable(Of Single)
			Get
				Return Me._Cond
			End Get
			Set
				If (Me._Cond.Equals(value) = false) Then
					Me.OnCondChanging(value)
					Me.SendPropertyChanging
					Me._Cond = value
					Me.SendPropertyChanged("Cond")
					Me.OnCondChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vazao", DbType:="Real")>  _
		Public Property Vazao() As System.Nullable(Of Single)
			Get
				Return Me._Vazao
			End Get
			Set
				If (Me._Vazao.Equals(value) = false) Then
					Me.OnVazaoChanging(value)
					Me.SendPropertyChanging
					Me._Vazao = value
					Me.SendPropertyChanged("Vazao")
					Me.OnVazaoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BlkNum", DbType:="Int")>  _
		Public Property BlkNum() As System.Nullable(Of Integer)
			Get
				Return Me._BlkNum
			End Get
			Set
				If (Me._BlkNum.Equals(value) = false) Then
					Me.OnBlkNumChanging(value)
					Me.SendPropertyChanging
					Me._BlkNum = value
					Me.SendPropertyChanged("BlkNum")
					Me.OnBlkNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BlkPasso", DbType:="Int")>  _
		Public Property BlkPasso() As System.Nullable(Of Integer)
			Get
				Return Me._BlkPasso
			End Get
			Set
				If (Me._BlkPasso.Equals(value) = false) Then
					Me.OnBlkPassoChanging(value)
					Me.SendPropertyChanging
					Me._BlkPasso = value
					Me.SendPropertyChanged("BlkPasso")
					Me.OnBlkPassoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipHistPtoCr")>  _
	Partial Public Class CipHistPtoCr
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CipId As Integer
		
		Private _PtoCrId As Integer
		
		Private _Resp As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCipIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCipIdChanged()
    End Sub
    Partial Private Sub OnPtoCrIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPtoCrIdChanged()
    End Sub
    Partial Private Sub OnRespChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRespChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CipId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CipId() As Integer
			Get
				Return Me._CipId
			End Get
			Set
				If ((Me._CipId = value)  _
							= false) Then
					Me.OnCipIdChanging(value)
					Me.SendPropertyChanging
					Me._CipId = value
					Me.SendPropertyChanged("CipId")
					Me.OnCipIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PtoCrId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property PtoCrId() As Integer
			Get
				Return Me._PtoCrId
			End Get
			Set
				If ((Me._PtoCrId = value)  _
							= false) Then
					Me.OnPtoCrIdChanging(value)
					Me.SendPropertyChanging
					Me._PtoCrId = value
					Me.SendPropertyChanged("PtoCrId")
					Me.OnPtoCrIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resp", DbType:="Int")>  _
		Public Property Resp() As System.Nullable(Of Integer)
			Get
				Return Me._Resp
			End Get
			Set
				If (Me._Resp.Equals(value) = false) Then
					Me.OnRespChanging(value)
					Me.SendPropertyChanging
					Me._Resp = value
					Me.SendPropertyChanged("Resp")
					Me.OnRespChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipSchedPer")>  _
	Partial Public Class CipSchedPer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _PerId As Integer
		
		Private _RotaId As System.Nullable(Of Integer)
		
		Private _RecNum As System.Nullable(Of Integer)
		
		Private _PerNHoras As System.Nullable(Of Integer)
		
		Private _DataHoraIni As System.Nullable(Of Date)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPerIdChanged()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnRecNumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRecNumChanged()
    End Sub
    Partial Private Sub OnPerNHorasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPerNHorasChanged()
    End Sub
    Partial Private Sub OnDataHoraIniChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataHoraIniChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property PerId() As Integer
			Get
				Return Me._PerId
			End Get
			Set
				If ((Me._PerId = value)  _
							= false) Then
					Me.OnPerIdChanging(value)
					Me.SendPropertyChanging
					Me._PerId = value
					Me.SendPropertyChanged("PerId")
					Me.OnPerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int")>  _
		Public Property RotaId() As System.Nullable(Of Integer)
			Get
				Return Me._RotaId
			End Get
			Set
				If (Me._RotaId.Equals(value) = false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecNum", DbType:="Int")>  _
		Public Property RecNum() As System.Nullable(Of Integer)
			Get
				Return Me._RecNum
			End Get
			Set
				If (Me._RecNum.Equals(value) = false) Then
					Me.OnRecNumChanging(value)
					Me.SendPropertyChanging
					Me._RecNum = value
					Me.SendPropertyChanged("RecNum")
					Me.OnRecNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerNHoras", DbType:="Int")>  _
		Public Property PerNHoras() As System.Nullable(Of Integer)
			Get
				Return Me._PerNHoras
			End Get
			Set
				If (Me._PerNHoras.Equals(value) = false) Then
					Me.OnPerNHorasChanging(value)
					Me.SendPropertyChanging
					Me._PerNHoras = value
					Me.SendPropertyChanged("PerNHoras")
					Me.OnPerNHorasChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHoraIni", DbType:="DateTime")>  _
		Public Property DataHoraIni() As System.Nullable(Of Date)
			Get
				Return Me._DataHoraIni
			End Get
			Set
				If (Me._DataHoraIni.Equals(value) = false) Then
					Me.OnDataHoraIniChanging(value)
					Me.SendPropertyChanging
					Me._DataHoraIni = value
					Me.SendPropertyChanged("DataHoraIni")
					Me.OnDataHoraIniChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipSchedPerMes")>  _
	Partial Public Class CipSchedPerMes
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _PerId As Integer
		
		Private _DiaDoMes As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPerIdChanged()
    End Sub
    Partial Private Sub OnDiaDoMesChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiaDoMesChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property PerId() As Integer
			Get
				Return Me._PerId
			End Get
			Set
				If ((Me._PerId = value)  _
							= false) Then
					Me.OnPerIdChanging(value)
					Me.SendPropertyChanging
					Me._PerId = value
					Me.SendPropertyChanged("PerId")
					Me.OnPerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaDoMes", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DiaDoMes() As Integer
			Get
				Return Me._DiaDoMes
			End Get
			Set
				If ((Me._DiaDoMes = value)  _
							= false) Then
					Me.OnDiaDoMesChanging(value)
					Me.SendPropertyChanging
					Me._DiaDoMes = value
					Me.SendPropertyChanged("DiaDoMes")
					Me.OnDiaDoMesChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipSchedPerSem")>  _
	Partial Public Class CipSchedPerSem
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _PerId As Integer
		
		Private _DiaDaSemana As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPerIdChanged()
    End Sub
    Partial Private Sub OnDiaDaSemanaChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiaDaSemanaChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property PerId() As Integer
			Get
				Return Me._PerId
			End Get
			Set
				If ((Me._PerId = value)  _
							= false) Then
					Me.OnPerIdChanging(value)
					Me.SendPropertyChanging
					Me._PerId = value
					Me.SendPropertyChanged("PerId")
					Me.OnPerIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaDaSemana", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property DiaDaSemana() As Integer
			Get
				Return Me._DiaDaSemana
			End Get
			Set
				If ((Me._DiaDaSemana = value)  _
							= false) Then
					Me.OnDiaDaSemanaChanging(value)
					Me.SendPropertyChanging
					Me._DiaDaSemana = value
					Me.SendPropertyChanged("DiaDaSemana")
					Me.OnDiaDaSemanaChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipSchedProg")>  _
	Partial Public Class CipSchedProg
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ProgId As Integer
		
		Private _DataHora As System.Nullable(Of Date)
		
		Private _RotaId As System.Nullable(Of Integer)
		
		Private _Circ As String
		
		Private _RecNum As System.Nullable(Of Integer)
		
		Private _Sts As System.Nullable(Of Integer)
		
		Private _UserId As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProgIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProgIdChanged()
    End Sub
    Partial Private Sub OnDataHoraChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataHoraChanged()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnCircChanging(value As String)
    End Sub
    Partial Private Sub OnCircChanged()
    End Sub
    Partial Private Sub OnRecNumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRecNumChanged()
    End Sub
    Partial Private Sub OnStsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStsChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProgId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ProgId() As Integer
			Get
				Return Me._ProgId
			End Get
			Set
				If ((Me._ProgId = value)  _
							= false) Then
					Me.OnProgIdChanging(value)
					Me.SendPropertyChanging
					Me._ProgId = value
					Me.SendPropertyChanged("ProgId")
					Me.OnProgIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataHora", DbType:="DateTime")>  _
		Public Property DataHora() As System.Nullable(Of Date)
			Get
				Return Me._DataHora
			End Get
			Set
				If (Me._DataHora.Equals(value) = false) Then
					Me.OnDataHoraChanging(value)
					Me.SendPropertyChanging
					Me._DataHora = value
					Me.SendPropertyChanged("DataHora")
					Me.OnDataHoraChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int")>  _
		Public Property RotaId() As System.Nullable(Of Integer)
			Get
				Return Me._RotaId
			End Get
			Set
				If (Me._RotaId.Equals(value) = false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Circ", DbType:="NVarChar(1)")>  _
		Public Property Circ() As String
			Get
				Return Me._Circ
			End Get
			Set
				If (String.Equals(Me._Circ, value) = false) Then
					Me.OnCircChanging(value)
					Me.SendPropertyChanging
					Me._Circ = value
					Me.SendPropertyChanged("Circ")
					Me.OnCircChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecNum", DbType:="Int")>  _
		Public Property RecNum() As System.Nullable(Of Integer)
			Get
				Return Me._RecNum
			End Get
			Set
				If (Me._RecNum.Equals(value) = false) Then
					Me.OnRecNumChanging(value)
					Me.SendPropertyChanging
					Me._RecNum = value
					Me.SendPropertyChanged("RecNum")
					Me.OnRecNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sts", DbType:="Int")>  _
		Public Property Sts() As System.Nullable(Of Integer)
			Get
				Return Me._Sts
			End Get
			Set
				If (Me._Sts.Equals(value) = false) Then
					Me.OnStsChanging(value)
					Me.SendPropertyChanging
					Me._Sts = value
					Me.SendPropertyChanged("Sts")
					Me.OnStsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")>  _
		Public Property UserId() As System.Nullable(Of Integer)
			Get
				Return Me._UserId
			End Get
			Set
				If (Me._UserId.Equals(value) = false) Then
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CipSeq")>  _
	Partial Public Class CipSeq
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Ano As Integer
		
		Private _CipSeq As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAnoChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnoChanged()
    End Sub
    Partial Private Sub OnCipSeqChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCipSeqChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ano", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Ano() As Integer
			Get
				Return Me._Ano
			End Get
			Set
				If ((Me._Ano = value)  _
							= false) Then
					Me.OnAnoChanging(value)
					Me.SendPropertyChanging
					Me._Ano = value
					Me.SendPropertyChanged("Ano")
					Me.OnAnoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CipSeq", DbType:="Int")>  _
		Public Property CipSeq() As System.Nullable(Of Integer)
			Get
				Return Me._CipSeq
			End Get
			Set
				If (Me._CipSeq.Equals(value) = false) Then
					Me.OnCipSeqChanging(value)
					Me.SendPropertyChanging
					Me._CipSeq = value
					Me.SendPropertyChanged("CipSeq")
					Me.OnCipSeqChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
