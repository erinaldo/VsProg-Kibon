'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace nsCipRotas
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CipRotas")>  _
	Partial Public Class dcCipRotas
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertConfigGeral(instance As ConfigGeral)
    End Sub
    Partial Private Sub UpdateConfigGeral(instance As ConfigGeral)
    End Sub
    Partial Private Sub DeleteConfigGeral(instance As ConfigGeral)
    End Sub
    Partial Private Sub InsertValvCad(instance As ValvCad)
    End Sub
    Partial Private Sub UpdateValvCad(instance As ValvCad)
    End Sub
    Partial Private Sub DeleteValvCad(instance As ValvCad)
    End Sub
    Partial Private Sub InsertConsulta1(instance As Consulta1)
    End Sub
    Partial Private Sub UpdateConsulta1(instance As Consulta1)
    End Sub
    Partial Private Sub DeleteConsulta1(instance As Consulta1)
    End Sub
    Partial Private Sub InsertConsulta2(instance As Consulta2)
    End Sub
    Partial Private Sub UpdateConsulta2(instance As Consulta2)
    End Sub
    Partial Private Sub DeleteConsulta2(instance As Consulta2)
    End Sub
    Partial Private Sub Insertdtproperties(instance As dtproperties)
    End Sub
    Partial Private Sub Updatedtproperties(instance As dtproperties)
    End Sub
    Partial Private Sub Deletedtproperties(instance As dtproperties)
    End Sub
    Partial Private Sub InsertFlipCad(instance As FlipCad)
    End Sub
    Partial Private Sub UpdateFlipCad(instance As FlipCad)
    End Sub
    Partial Private Sub DeleteFlipCad(instance As FlipCad)
    End Sub
    Partial Private Sub InsertMotCad(instance As MotCad)
    End Sub
    Partial Private Sub UpdateMotCad(instance As MotCad)
    End Sub
    Partial Private Sub DeleteMotCad(instance As MotCad)
    End Sub
    Partial Private Sub InsertMotPlc1(instance As MotPlc1)
    End Sub
    Partial Private Sub UpdateMotPlc1(instance As MotPlc1)
    End Sub
    Partial Private Sub DeleteMotPlc1(instance As MotPlc1)
    End Sub
    Partial Private Sub InsertMotSemPlc(instance As MotSemPlc)
    End Sub
    Partial Private Sub UpdateMotSemPlc(instance As MotSemPlc)
    End Sub
    Partial Private Sub DeleteMotSemPlc(instance As MotSemPlc)
    End Sub
    Partial Private Sub InsertPfCad(instance As PfCad)
    End Sub
    Partial Private Sub UpdatePfCad(instance As PfCad)
    End Sub
    Partial Private Sub DeletePfCad(instance As PfCad)
    End Sub
    Partial Private Sub InsertRotaCad(instance As RotaCad)
    End Sub
    Partial Private Sub UpdateRotaCad(instance As RotaCad)
    End Sub
    Partial Private Sub DeleteRotaCad(instance As RotaCad)
    End Sub
    Partial Private Sub InsertRotaDepend(instance As RotaDepend)
    End Sub
    Partial Private Sub UpdateRotaDepend(instance As RotaDepend)
    End Sub
    Partial Private Sub DeleteRotaDepend(instance As RotaDepend)
    End Sub
    Partial Private Sub InsertRotaMot(instance As RotaMot)
    End Sub
    Partial Private Sub UpdateRotaMot(instance As RotaMot)
    End Sub
    Partial Private Sub DeleteRotaMot(instance As RotaMot)
    End Sub
    Partial Private Sub InsertRotaPf(instance As RotaPf)
    End Sub
    Partial Private Sub UpdateRotaPf(instance As RotaPf)
    End Sub
    Partial Private Sub DeleteRotaPf(instance As RotaPf)
    End Sub
    Partial Private Sub InsertRotaSub(instance As RotaSub)
    End Sub
    Partial Private Sub UpdateRotaSub(instance As RotaSub)
    End Sub
    Partial Private Sub DeleteRotaSub(instance As RotaSub)
    End Sub
    Partial Private Sub InsertRotaValv(instance As RotaValv)
    End Sub
    Partial Private Sub UpdateRotaValv(instance As RotaValv)
    End Sub
    Partial Private Sub DeleteRotaValv(instance As RotaValv)
    End Sub
    Partial Private Sub InsertTagsPlc1(instance As TagsPlc1)
    End Sub
    Partial Private Sub UpdateTagsPlc1(instance As TagsPlc1)
    End Sub
    Partial Private Sub DeleteTagsPlc1(instance As TagsPlc1)
    End Sub
    Partial Private Sub InsertTagsSemPlc(instance As TagsSemPlc)
    End Sub
    Partial Private Sub UpdateTagsSemPlc(instance As TagsSemPlc)
    End Sub
    Partial Private Sub DeleteTagsSemPlc(instance As TagsSemPlc)
    End Sub
    Partial Private Sub InsertTqCad(instance As TqCad)
    End Sub
    Partial Private Sub UpdateTqCad(instance As TqCad)
    End Sub
    Partial Private Sub DeleteTqCad(instance As TqCad)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.Geral.My.MySettings.Default.csCipRotas, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property ConfigGeral() As System.Data.Linq.Table(Of ConfigGeral)
			Get
				Return Me.GetTable(Of ConfigGeral)
			End Get
		End Property
		
		Public ReadOnly Property ValvCad() As System.Data.Linq.Table(Of ValvCad)
			Get
				Return Me.GetTable(Of ValvCad)
			End Get
		End Property
		
		Public ReadOnly Property Consulta1() As System.Data.Linq.Table(Of Consulta1)
			Get
				Return Me.GetTable(Of Consulta1)
			End Get
		End Property
		
		Public ReadOnly Property Consulta2() As System.Data.Linq.Table(Of Consulta2)
			Get
				Return Me.GetTable(Of Consulta2)
			End Get
		End Property
		
		Public ReadOnly Property dtproperties() As System.Data.Linq.Table(Of dtproperties)
			Get
				Return Me.GetTable(Of dtproperties)
			End Get
		End Property
		
		Public ReadOnly Property FlipCad() As System.Data.Linq.Table(Of FlipCad)
			Get
				Return Me.GetTable(Of FlipCad)
			End Get
		End Property
		
		Public ReadOnly Property MotCad() As System.Data.Linq.Table(Of MotCad)
			Get
				Return Me.GetTable(Of MotCad)
			End Get
		End Property
		
		Public ReadOnly Property MotPlc1() As System.Data.Linq.Table(Of MotPlc1)
			Get
				Return Me.GetTable(Of MotPlc1)
			End Get
		End Property
		
		Public ReadOnly Property MotSemPlc() As System.Data.Linq.Table(Of MotSemPlc)
			Get
				Return Me.GetTable(Of MotSemPlc)
			End Get
		End Property
		
		Public ReadOnly Property PfCad() As System.Data.Linq.Table(Of PfCad)
			Get
				Return Me.GetTable(Of PfCad)
			End Get
		End Property
		
		Public ReadOnly Property RotaCad() As System.Data.Linq.Table(Of RotaCad)
			Get
				Return Me.GetTable(Of RotaCad)
			End Get
		End Property
		
		Public ReadOnly Property RotaDepend() As System.Data.Linq.Table(Of RotaDepend)
			Get
				Return Me.GetTable(Of RotaDepend)
			End Get
		End Property
		
		Public ReadOnly Property RotaMot() As System.Data.Linq.Table(Of RotaMot)
			Get
				Return Me.GetTable(Of RotaMot)
			End Get
		End Property
		
		Public ReadOnly Property RotaPf() As System.Data.Linq.Table(Of RotaPf)
			Get
				Return Me.GetTable(Of RotaPf)
			End Get
		End Property
		
		Public ReadOnly Property RotaSub() As System.Data.Linq.Table(Of RotaSub)
			Get
				Return Me.GetTable(Of RotaSub)
			End Get
		End Property
		
		Public ReadOnly Property RotaValv() As System.Data.Linq.Table(Of RotaValv)
			Get
				Return Me.GetTable(Of RotaValv)
			End Get
		End Property
		
		Public ReadOnly Property TagsPlc1() As System.Data.Linq.Table(Of TagsPlc1)
			Get
				Return Me.GetTable(Of TagsPlc1)
			End Get
		End Property
		
		Public ReadOnly Property TagsSemPlc() As System.Data.Linq.Table(Of TagsSemPlc)
			Get
				Return Me.GetTable(Of TagsSemPlc)
			End Get
		End Property
		
		Public ReadOnly Property TqCad() As System.Data.Linq.Table(Of TqCad)
			Get
				Return Me.GetTable(Of TqCad)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ConfigGeral")>  _
	Partial Public Class ConfigGeral
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Item As String
		
		Private _Valor As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemChanging(value As String)
    End Sub
    Partial Private Sub OnItemChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Item() As String
			Get
				Return Me._Item
			End Get
			Set
				If (String.Equals(Me._Item, value) = false) Then
					Me.OnItemChanging(value)
					Me.SendPropertyChanging
					Me._Item = value
					Me.SendPropertyChanged("Item")
					Me.OnItemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="VarChar(50)")>  _
		Public Property Valor() As String
			Get
				Return Me._Valor
			End Get
			Set
				If (String.Equals(Me._Valor, value) = false) Then
					Me.OnValorChanging(value)
					Me.SendPropertyChanging
					Me._Valor = value
					Me.SendPropertyChanged("Valor")
					Me.OnValorChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ValvCad")>  _
	Partial Public Class ValvCad
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Double)
		
		Private _PlcIdx As System.Nullable(Of Double)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Float")>  _
		Public Property PlcNum() As System.Nullable(Of Double)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Float")>  _
		Public Property PlcIdx() As System.Nullable(Of Double)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Consulta1")>  _
	Partial Public Class Consulta1
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _Num As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnNumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Num", DbType:="Int")>  _
		Public Property Num() As System.Nullable(Of Integer)
			Get
				Return Me._Num
			End Get
			Set
				If (Me._Num.Equals(value) = false) Then
					Me.OnNumChanging(value)
					Me.SendPropertyChanging
					Me._Num = value
					Me.SendPropertyChanged("Num")
					Me.OnNumChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Consulta2")>  _
	Partial Public Class Consulta2
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Double)
		
		Private _PlcIdx As System.Nullable(Of Double)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Float")>  _
		Public Property PlcNum() As System.Nullable(Of Double)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Float")>  _
		Public Property PlcIdx() As System.Nullable(Of Double)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dtproperties")>  _
	Partial Public Class dtproperties
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _objectid As System.Nullable(Of Integer)
		
		Private _property As String
		
		Private _value As String
		
		Private _uvalue As String
		
		Private _lvalue As System.Data.Linq.Binary
		
		Private _version As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnobjectidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnobjectidChanged()
    End Sub
    Partial Private Sub OnpropertyChanging(value As String)
    End Sub
    Partial Private Sub OnpropertyChanged()
    End Sub
    Partial Private Sub OnvalueChanging(value As String)
    End Sub
    Partial Private Sub OnvalueChanged()
    End Sub
    Partial Private Sub OnuvalueChanging(value As String)
    End Sub
    Partial Private Sub OnuvalueChanged()
    End Sub
    Partial Private Sub OnlvalueChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnlvalueChanged()
    End Sub
    Partial Private Sub OnversionChanging(value As Integer)
    End Sub
    Partial Private Sub OnversionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_objectid", DbType:="Int")>  _
		Public Property objectid() As System.Nullable(Of Integer)
			Get
				Return Me._objectid
			End Get
			Set
				If (Me._objectid.Equals(value) = false) Then
					Me.OnobjectidChanging(value)
					Me.SendPropertyChanging
					Me._objectid = value
					Me.SendPropertyChanged("objectid")
					Me.OnobjectidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="property", Storage:="_property", DbType:="VarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property [property]() As String
			Get
				Return Me._property
			End Get
			Set
				If (String.Equals(Me._property, value) = false) Then
					Me.OnpropertyChanging(value)
					Me.SendPropertyChanging
					Me._property = value
					Me.SendPropertyChanged("[property]")
					Me.OnpropertyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value", DbType:="VarChar(255)")>  _
		Public Property value() As String
			Get
				Return Me._value
			End Get
			Set
				If (String.Equals(Me._value, value) = false) Then
					Me.OnvalueChanging(value)
					Me.SendPropertyChanging
					Me._value = value
					Me.SendPropertyChanged("value")
					Me.OnvalueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uvalue", DbType:="VarChar(255)")>  _
		Public Property uvalue() As String
			Get
				Return Me._uvalue
			End Get
			Set
				If (String.Equals(Me._uvalue, value) = false) Then
					Me.OnuvalueChanging(value)
					Me.SendPropertyChanging
					Me._uvalue = value
					Me.SendPropertyChanged("uvalue")
					Me.OnuvalueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lvalue", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property lvalue() As System.Data.Linq.Binary
			Get
				Return Me._lvalue
			End Get
			Set
				If (Object.Equals(Me._lvalue, value) = false) Then
					Me.OnlvalueChanging(value)
					Me.SendPropertyChanging
					Me._lvalue = value
					Me.SendPropertyChanged("lvalue")
					Me.OnlvalueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_version", DbType:="Int NOT NULL")>  _
		Public Property version() As Integer
			Get
				Return Me._version
			End Get
			Set
				If ((Me._version = value)  _
							= false) Then
					Me.OnversionChanging(value)
					Me.SendPropertyChanging
					Me._version = value
					Me.SendPropertyChanged("version")
					Me.OnversionChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FlipCad")>  _
	Partial Public Class FlipCad
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tipo As String
		
		Private _Descr As String
		
		Private _Codigo As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTipoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tipo() As String
			Get
				Return Me._Tipo
			End Get
			Set
				If (String.Equals(Me._Tipo, value) = false) Then
					Me.OnTipoChanging(value)
					Me.SendPropertyChanging
					Me._Tipo = value
					Me.SendPropertyChanged("Tipo")
					Me.OnTipoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int")>  _
		Public Property Codigo() As System.Nullable(Of Integer)
			Get
				Return Me._Codigo
			End Get
			Set
				If (Me._Codigo.Equals(value) = false) Then
					Me.OnCodigoChanging(value)
					Me.SendPropertyChanging
					Me._Codigo = value
					Me.SendPropertyChanged("Codigo")
					Me.OnCodigoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MotCad")>  _
	Partial Public Class MotCad
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Double)
		
		Private _PlcIdx As System.Nullable(Of Double)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Float")>  _
		Public Property PlcNum() As System.Nullable(Of Double)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Float")>  _
		Public Property PlcIdx() As System.Nullable(Of Double)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MotPlc1")>  _
	Partial Public Class MotPlc1
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Double)
		
		Private _PlcIdx As System.Nullable(Of Double)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Float")>  _
		Public Property PlcNum() As System.Nullable(Of Double)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Float")>  _
		Public Property PlcIdx() As System.Nullable(Of Double)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MotSemPlc")>  _
	Partial Public Class MotSemPlc
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Double)
		
		Private _PlcIdx As System.Nullable(Of Double)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Float")>  _
		Public Property PlcNum() As System.Nullable(Of Double)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Float")>  _
		Public Property PlcIdx() As System.Nullable(Of Double)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PfCad")>  _
	Partial Public Class PfCad
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Integer)
		
		Private _PlcIdx As System.Nullable(Of Integer)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Int")>  _
		Public Property PlcNum() As System.Nullable(Of Integer)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Int")>  _
		Public Property PlcIdx() As System.Nullable(Of Integer)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(50)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RotaCad")>  _
	Partial Public Class RotaCad
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _Descr As String
		
		Private _Circ As String
		
		Private _Tipo As String
		
		Private _Tq1 As String
		
		Private _Tq2 As String
		
		Private _Tq3 As String
		
		Private _Sequencia As System.Nullable(Of Integer)
		
		Private _RotaTipo As System.Nullable(Of Integer)
		
		Private _BbaCipFw As System.Nullable(Of Double)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    Partial Private Sub OnCircChanging(value As String)
    End Sub
    Partial Private Sub OnCircChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    Partial Private Sub OnTq1Changing(value As String)
    End Sub
    Partial Private Sub OnTq1Changed()
    End Sub
    Partial Private Sub OnTq2Changing(value As String)
    End Sub
    Partial Private Sub OnTq2Changed()
    End Sub
    Partial Private Sub OnTq3Changing(value As String)
    End Sub
    Partial Private Sub OnTq3Changed()
    End Sub
    Partial Private Sub OnSequenciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenciaChanged()
    End Sub
    Partial Private Sub OnRotaTipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRotaTipoChanged()
    End Sub
    Partial Private Sub OnBbaCipFwChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnBbaCipFwChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(200)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Circ", DbType:="VarChar(50)")>  _
		Public Property Circ() As String
			Get
				Return Me._Circ
			End Get
			Set
				If (String.Equals(Me._Circ, value) = false) Then
					Me.OnCircChanging(value)
					Me.SendPropertyChanging
					Me._Circ = value
					Me.SendPropertyChanged("Circ")
					Me.OnCircChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="VarChar(50)")>  _
		Public Property Tipo() As String
			Get
				Return Me._Tipo
			End Get
			Set
				If (String.Equals(Me._Tipo, value) = false) Then
					Me.OnTipoChanging(value)
					Me.SendPropertyChanging
					Me._Tipo = value
					Me.SendPropertyChanged("Tipo")
					Me.OnTipoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tq1", DbType:="VarChar(50)")>  _
		Public Property Tq1() As String
			Get
				Return Me._Tq1
			End Get
			Set
				If (String.Equals(Me._Tq1, value) = false) Then
					Me.OnTq1Changing(value)
					Me.SendPropertyChanging
					Me._Tq1 = value
					Me.SendPropertyChanged("Tq1")
					Me.OnTq1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tq2", DbType:="VarChar(50)")>  _
		Public Property Tq2() As String
			Get
				Return Me._Tq2
			End Get
			Set
				If (String.Equals(Me._Tq2, value) = false) Then
					Me.OnTq2Changing(value)
					Me.SendPropertyChanging
					Me._Tq2 = value
					Me.SendPropertyChanged("Tq2")
					Me.OnTq2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tq3", DbType:="VarChar(50)")>  _
		Public Property Tq3() As String
			Get
				Return Me._Tq3
			End Get
			Set
				If (String.Equals(Me._Tq3, value) = false) Then
					Me.OnTq3Changing(value)
					Me.SendPropertyChanging
					Me._Tq3 = value
					Me.SendPropertyChanged("Tq3")
					Me.OnTq3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequencia", DbType:="Int")>  _
		Public Property Sequencia() As System.Nullable(Of Integer)
			Get
				Return Me._Sequencia
			End Get
			Set
				If (Me._Sequencia.Equals(value) = false) Then
					Me.OnSequenciaChanging(value)
					Me.SendPropertyChanging
					Me._Sequencia = value
					Me.SendPropertyChanged("Sequencia")
					Me.OnSequenciaChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaTipo", DbType:="Int")>  _
		Public Property RotaTipo() As System.Nullable(Of Integer)
			Get
				Return Me._RotaTipo
			End Get
			Set
				If (Me._RotaTipo.Equals(value) = false) Then
					Me.OnRotaTipoChanging(value)
					Me.SendPropertyChanging
					Me._RotaTipo = value
					Me.SendPropertyChanged("RotaTipo")
					Me.OnRotaTipoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BbaCipFw", DbType:="Float")>  _
		Public Property BbaCipFw() As System.Nullable(Of Double)
			Get
				Return Me._BbaCipFw
			End Get
			Set
				If (Me._BbaCipFw.Equals(value) = false) Then
					Me.OnBbaCipFwChanging(value)
					Me.SendPropertyChanging
					Me._BbaCipFw = value
					Me.SendPropertyChanged("BbaCipFw")
					Me.OnBbaCipFwChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RotaDepend")>  _
	Partial Public Class RotaDepend
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _Tag As String
		
		Private _Tipo As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="VarChar(50)")>  _
		Public Property Tipo() As String
			Get
				Return Me._Tipo
			End Get
			Set
				If (String.Equals(Me._Tipo, value) = false) Then
					Me.OnTipoChanging(value)
					Me.SendPropertyChanging
					Me._Tipo = value
					Me.SendPropertyChanged("Tipo")
					Me.OnTipoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RotaMot")>  _
	Partial Public Class RotaMot
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _Tag As String
		
		Private _Tipo As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="VarChar(50)")>  _
		Public Property Tipo() As String
			Get
				Return Me._Tipo
			End Get
			Set
				If (String.Equals(Me._Tipo, value) = false) Then
					Me.OnTipoChanging(value)
					Me.SendPropertyChanging
					Me._Tipo = value
					Me.SendPropertyChanged("Tipo")
					Me.OnTipoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RotaPf")>  _
	Partial Public Class RotaPf
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _Tag As String
		
		Private _Tipo As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="VarChar(50)")>  _
		Public Property Tipo() As String
			Get
				Return Me._Tipo
			End Get
			Set
				If (String.Equals(Me._Tipo, value) = false) Then
					Me.OnTipoChanging(value)
					Me.SendPropertyChanging
					Me._Tipo = value
					Me.SendPropertyChanged("Tipo")
					Me.OnTipoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RotaSub")>  _
	Partial Public Class RotaSub
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _Seq As Integer
		
		Private _Rota1 As System.Nullable(Of Integer)
		
		Private _Rota2 As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnSeqChanging(value As Integer)
    End Sub
    Partial Private Sub OnSeqChanged()
    End Sub
    Partial Private Sub OnRota1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRota1Changed()
    End Sub
    Partial Private Sub OnRota2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRota2Changed()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seq", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Seq() As Integer
			Get
				Return Me._Seq
			End Get
			Set
				If ((Me._Seq = value)  _
							= false) Then
					Me.OnSeqChanging(value)
					Me.SendPropertyChanging
					Me._Seq = value
					Me.SendPropertyChanged("Seq")
					Me.OnSeqChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rota1", DbType:="Int")>  _
		Public Property Rota1() As System.Nullable(Of Integer)
			Get
				Return Me._Rota1
			End Get
			Set
				If (Me._Rota1.Equals(value) = false) Then
					Me.OnRota1Changing(value)
					Me.SendPropertyChanging
					Me._Rota1 = value
					Me.SendPropertyChanged("Rota1")
					Me.OnRota1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rota2", DbType:="Int")>  _
		Public Property Rota2() As System.Nullable(Of Integer)
			Get
				Return Me._Rota2
			End Get
			Set
				If (Me._Rota2.Equals(value) = false) Then
					Me.OnRota2Changing(value)
					Me.SendPropertyChanging
					Me._Rota2 = value
					Me.SendPropertyChanged("Rota2")
					Me.OnRota2Changed
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RotaValv")>  _
	Partial Public Class RotaValv
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _RotaId As Integer
		
		Private _Tag As String
		
		Private _Tipo As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRotaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRotaIdChanged()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RotaId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RotaId() As Integer
			Get
				Return Me._RotaId
			End Get
			Set
				If ((Me._RotaId = value)  _
							= false) Then
					Me.OnRotaIdChanging(value)
					Me.SendPropertyChanging
					Me._RotaId = value
					Me.SendPropertyChanged("RotaId")
					Me.OnRotaIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="VarChar(50)")>  _
		Public Property Tipo() As String
			Get
				Return Me._Tipo
			End Get
			Set
				If (String.Equals(Me._Tipo, value) = false) Then
					Me.OnTipoChanging(value)
					Me.SendPropertyChanging
					Me._Tipo = value
					Me.SendPropertyChanged("Tipo")
					Me.OnTipoChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TagsPlc1")>  _
	Partial Public Class TagsPlc1
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Double)
		
		Private _PlcIdx As System.Nullable(Of Double)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Float")>  _
		Public Property PlcNum() As System.Nullable(Of Double)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Float")>  _
		Public Property PlcIdx() As System.Nullable(Of Double)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TagsSemPlc")>  _
	Partial Public Class TagsSemPlc
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Double)
		
		Private _PlcIdx As System.Nullable(Of Double)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Float")>  _
		Public Property PlcNum() As System.Nullable(Of Double)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Float")>  _
		Public Property PlcIdx() As System.Nullable(Of Double)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TqCad")>  _
	Partial Public Class TqCad
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Tag As String
		
		Private _PlcNum As System.Nullable(Of Double)
		
		Private _PlcIdx As System.Nullable(Of Double)
		
		Private _Descr As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagChanging(value As String)
    End Sub
    Partial Private Sub OnTagChanged()
    End Sub
    Partial Private Sub OnPlcNumChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcNumChanged()
    End Sub
    Partial Private Sub OnPlcIdxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPlcIdxChanged()
    End Sub
    Partial Private Sub OnDescrChanging(value As String)
    End Sub
    Partial Private Sub OnDescrChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tag", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property Tag() As String
			Get
				Return Me._Tag
			End Get
			Set
				If (String.Equals(Me._Tag, value) = false) Then
					Me.OnTagChanging(value)
					Me.SendPropertyChanging
					Me._Tag = value
					Me.SendPropertyChanged("Tag")
					Me.OnTagChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcNum", DbType:="Float")>  _
		Public Property PlcNum() As System.Nullable(Of Double)
			Get
				Return Me._PlcNum
			End Get
			Set
				If (Me._PlcNum.Equals(value) = false) Then
					Me.OnPlcNumChanging(value)
					Me.SendPropertyChanging
					Me._PlcNum = value
					Me.SendPropertyChanged("PlcNum")
					Me.OnPlcNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlcIdx", DbType:="Float")>  _
		Public Property PlcIdx() As System.Nullable(Of Double)
			Get
				Return Me._PlcIdx
			End Get
			Set
				If (Me._PlcIdx.Equals(value) = false) Then
					Me.OnPlcIdxChanging(value)
					Me.SendPropertyChanging
					Me._PlcIdx = value
					Me.SendPropertyChanged("PlcIdx")
					Me.OnPlcIdxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descr", DbType:="VarChar(255)")>  _
		Public Property Descr() As String
			Get
				Return Me._Descr
			End Get
			Set
				If (String.Equals(Me._Descr, value) = false) Then
					Me.OnDescrChanging(value)
					Me.SendPropertyChanging
					Me._Descr = value
					Me.SendPropertyChanged("Descr")
					Me.OnDescrChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
